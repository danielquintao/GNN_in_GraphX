DICAS PRO GRAPHX

- parallelize to create parallelized collection from scala var
- usar cache sempre que for reutilisar um RDD criado por uma transformacao
- CHECK OUT PartitionStrategy class (can pass as param to fromEdgeTuples and to partitionBy)
	-> IDEA

FUNCOES DESTAQUE GRAPHX:
- structural operators
	- subgraph
- graph builders
	- apply
- VertexRDDs
	- filter
	- aggregateUsingIndex?

SOBRE GraphSAGE:
- parece que foi feito apenas para UNDIRECTED graphs!!!

-------------------------------------------------------------------------------

 P | NV  | N ParamV
 0 | 320 | 12
 1 | 15  | 1
 2 | 310 | 12
 3 | 47  | 2

Supose batch size = 2 for simplicity
V   NV
0 - 0A
1 - 1A
2 - 2A
3 - 3A
4 - 0A
5 - 1A
6 - 2A
7 - 3A
8 - 0B
9 - 1B
10- 2B
11- 3B
12- 0B
13- 1B
14- 2B
15- 3B
16- 0C
17- 1C
18- 2C
19- 3C

oralmente, precisamos:
1. mapear cada INDEX de data vertex em INDEX * LP (mod nPart) (QUAL COMANDO)
2. pegar o resultado do item anterior, groupar por esse valor que acabamos de calcular,
   e quebrar arbitrariamente em pedacos de no maximo batchSize elementos (QUAL COMANDO)
3. mapear cada elemento de cada bloco de no max bathSize elementos acima definido em k*nPart + i, 
   onde k eh o indice (counter) do bloco e i eh o valor entre 0 e nPart-1 calculado no item 1
   (QUAL COMANDO)
4. criar os VertexRDDs dos parameter vertices usando os valores recem criados (1 por bloco!)
5. criar a nova EdgeRdds das arestas ligando os data vertices aos parameter vertices
6. combinar os grafos com apply ou algo assim